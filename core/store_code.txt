
def email_tonny(request):
    subject = "Hello Bitch"
    message = " Suck my dick "
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [
        "tonnymaishaogeto@gmail.com",
    ]
    send_mail(subject, message, email_from, recipient_list)
    return HttpResponse("sent")



def index(request):

    obj = DailyWorkSheet.objects.all().last()
    context = {"obj": obj}
    template_path = "index.html"
    # Create a Django response object, and specify content_type as pdf
    response = HttpResponse(content_type="application/pdf")
    response["Content-Disposition"] = 'attachment; filename="report.pdf"'
    # find the template and render it.
    template = get_template(template_path)
    html = template.render(context)

    pisa_status = pisa.CreatePDF(html, dest=response, link_callback=link_callback)

    if pisa_status.err:
        return HttpResponse("We had some errors <pre>" + html + "</pre>")
    return response


class PDFView(PDFTemplateView):
    template_name = "index.html"

    base_url = settings.STATIC_ROOT
    download_filename = "worksheet.pdf"

    def get_context_data(self, **kwargs):
        return super(PDFView, self).get_context_data(
            pagesize="A4", title="Hi there!", **kwargs
        )


class MyDetailView(DetailView):
    # vanilla Django DetailView
    template_name = "index.html"
    context_object_name = "obj"
    model = DailyWorkSheet


class CustomWeasyTemplateResponse(WeasyTemplateResponse):
    # customized response class to change the default URL fetcher
    def get_url_fetcher(self):
        # disable host and certificate check
        context = ssl.create_default_context()
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE
        return functools.partial(django_url_fetcher, ssl_context=context)


class PrintView(WeasyTemplateResponseMixin, MyDetailView):
    # output of MyDetailView rendered as PDF with hardcoded CSS
    pdf_stylesheets = [
        settings.BASE_DIR / "core/static/core/mystyles.css",
    ]
    # show pdf in-line (default: True, show download dialog)
    pdf_attachment = True
    # custom response class to configure url-fetcher
    response_class = CustomWeasyTemplateResponse


class DownloadView(WeasyTemplateResponseMixin, MyDetailView):
    pdf_stylesheets = [
        settings.BASE_DIR / "core/static/core/mystyles.css",
    ]
    # show pdf in-line (default: True, show download dialog)
    pdf_attachment = True
    # custom response class to configure url-fetcher
    response_class = CustomWeasyTemplateResponse
    # suggested filename (is required for attachment/download!)
    pdf_filename = "foo.pdf"


class DynamicNameView(WeasyTemplateResponseMixin, MyDetailView):
    # dynamically generate filename
    def get_pdf_filename(self):
        return "foo-{at}.pdf".format(at=timezone.now().strftime("%Y%m%d-%H%M"))


